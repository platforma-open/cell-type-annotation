wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

models := import(":models")
geneMap := import(":gene-map")

pfCellAnnotations := import(":pf-cell-annotations-conv")

wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec

	species := inputSpec.domain["pl7.app/species"]

	mode := args.mode
	// cleanLabels := args.cleanLabels

	modelAsset := models.getModelAsset(args.model)
	modelName := models.getModelName(args.model)

	geneAsset := geneMap.getGeneAsset(species)
	geneAssetName := geneMap.getAssetName(species)

	csvCounts := xsv.exportFrame([rawCounts], "csv", {})

	cellTypeAnnotation := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.cell-type-annotation.software:annotate-cell-types")).
		addFile("rawCounts.csv", csvCounts).
		addAsset(modelAsset, "model", string(modelName)).
		addAsset(geneAsset, "geneAnnotation", string(geneAssetName)).
		arg("rawCounts.csv").
		arg("labels.csv").
		arg("model/" + string(modelName)).
		arg("--gene_map").arg("geneAnnotation/" + string(geneAssetName)).
		arg("--mode").arg(string(mode)).
		// arg("--clean_labels").arg(string(cleanLabels)).
		arg("--clean_labels").arg("true").
		saveFile("labels.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	labelImportParams := pfCellAnnotations.getColumns(blockId, inputSpec)
	labelsPf := xsv.importFile(cellTypeAnnotation.getFile("labels.csv"), "csv", labelImportParams, {splitDataAndSpec: true})

	// Create informative label with relevant cell type annotation parameters
	traceLabel := "Cell Type Annotation (" + args.model + ", mode:" + mode + ")"
	
	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.cell-type-annotation", id: blockId, importance: 35, label: traceLabel}
	)

	// Build cell type annotations pFrame with trace injection
	labelsOutputPf := pframes.pFrameBuilder()
	for k, v in labelsPf {
		labelsOutputPf.add(k, trace.inject(v.spec), v.data)
	}
	labelsOutputPf = labelsOutputPf.build()

	return {
		outputs: {
			labels: pframes.exportFrame(labelsOutputPf)
		},
		exports: {
			pf: labelsOutputPf
		}
	}
})

